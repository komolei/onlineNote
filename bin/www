#!/usr/bin/env node

/**
 * Module dependencies.
 */

const app = require('../app');
const debug = require('debug')('onlinenote:server');
const http = require('http');


/**
 * Get port from environment and store in Express.
 */

const port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

const server = http.createServer(app);

/*
* Set SocketIo functionality
*/
const io = require('socket.io')(server);
const request = require('request');

function robert(content, socket) {
  const options = {
    url: 'http://www.tuling123.com/openapi/api',
    method: 'POST',
    json: true,
    body: {
      key: '9af90ef2169e43daac8b4f0f76a173e8',
      info: content,
      userid: 123,
    },
  };
  request(options, (error, response, body) => {
    if (error) {
      return console.error('upload failed:', error);
    }
    console.log(body.text);
    // socket.broadcast.emit('chat', `${body.text}`) //广播，其他人都能听得见
    io.sockets.emit('chat', `${body.text}`);
  });
}
io.on('connection', (socket) => {
  socket.on('chat', (content) => {
    if (/^robot/g.test(content)) {
      const content1 = content.substr(5, content.length);
      robert(content1, socket);
    } else {
      // socket.broadcast.emit('chat', `${user} say: ${content}`) //广播，其他人都能听得见
      io.sockets.emit('chat', `${content}`); // all peopel can hear
    }
    // robert(content, user, socket);
  });
});

// add turing robert


/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  const port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  const bind = typeof port === 'string'
    ? `Pipe ${port}`
    : `Port ${port}`;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(`${bind} requires elevated privileges`);
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(`${bind} is already in use`);
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  const addr = server.address();
  const bind = typeof addr === 'string'
    ? `pipe ${addr}`
    : `port ${addr.port}`;
  debug(`Listening on ${bind}`);
}
